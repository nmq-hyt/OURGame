
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <title>Welcome to Firebase Hosting</title>
        <style media="screen">
      body { background: #ECEFF1; color: rgba(0,0,0,0.87); font-family: Roboto, Helvetica, Arial, sans-serif; margin: 0; padding: 0; }
      #message { background: white; max-width: 360px; margin: 100px auto 16px; padding: 32px 24px; border-radius: 3px; }
      #message h2 { color: #ffa100; font-weight: bold; font-size: 16px; margin: 0 0 8px; }
      #message h1 { font-size: 22px; font-weight: 300; color: rgba(0,0,0,0.6); margin: 0 0 16px;}
      #message p { line-height: 140%; margin: 16px 0 24px; font-size: 14px; }
      #message a { display: block; text-align: center; background: #039be5; text-transform: uppercase; text-decoration: none; color: white; padding: 16px; border-radius: 4px; }
      #message, #message a { box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24); }
      #load { color: rgba(0,0,0,0.4); text-align: center; font-size: 13px; }
      @media (max-width: 600px) {
        body, #message { margin-top: 0; background: white; box-shadow: none; }
        body { border-top: 16px solid #ffa100; }
      }
    </style>
  </head>
  <body>
      <button id ="test"> Get </button>

    <script src="https://www.gstatic.com/firebasejs/8.2.2/firebase-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.2.2/firebase-database.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.2.2/firebase-functions.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.2.2/firebase-firestore.js"></script>
    <script defer>

     const firebaseConfig = {
         apiKey: "AIzaSyBynxk4Jce8wObcpwfL_ngvV2IVaBmQvFY",
         authDomain: "ourgame-fdad7.firebaseapp.com",
         databaseURL: "https://ourgame-fdad7.firebaseio.com",
         projectId: "ourgame-fdad7",
         storageBucket: "ourgame-fdad7.appspot.com",
         messagingSenderId: "837080877425",
         appId: "1:837080877425:web:512dadcc82cc6fceee8ed0"
     };

     firebase.initializeApp(firebaseConfig);
     let db = firebase.database();
     // this is not the actual root of the database tree
     // but for our purposes it is
     let games_ref = db.ref('/games');
     let deck_ref = db.ref('/decks/');


function init_game (number_players) {
    let new_game_entry = games_ref.push();
    let reg_backslash = RegExp("/");
    let game_ref = new_game_entry.toString().split(reg_backslash).pop();

    switch (number_players) {
    case (( number_players <= 1) || (number_players > 4)):
        game_ref = "too large or too small insert between 2 - 4players";
        break;

    case 2:

        new_game_entry.set({
            gameState: {
                state : "lobby"
            },

            players: {
                player_1: {
	                  player_number : '1',
	                  player_health : '10',
	                  player_energy :'1',
	                  player_alive : 'alive',
                    player_skin : 0

                },
                player_2: {
	                  player_number : '2',
	                  player_health : '10',
	                  player_energy :'1',
	                  player_alive : 'alive',
                    player_skin : 0
                }

            }
        });
          break;

    case 3:
         new_game_entry.set({
             gameState: {
                 state : "lobby"
             },

             players: {
                 player_1: {
	                   player_number : '1',
	                   player_health : '10',
	                   player_energy :'1',
	                   player_alive : 'alive',
                     player_skin : 0

                    },
             player_2: {
	               player_number : '2',
	               player_health : '10',
	               player_energy :'1',
	               player_alive : 'alive',
                 player_skin : 0

             },
             player_3: {
	               player_number : '3',
	               player_health : '10',
	               player_energy :'1',
	               player_alive : 'alive',
                 player_skin : 0

             }
          }
         });
        break;

    case 4:
        new_game_entry.set({
             gameState: {
                 state : "lobby"
             },
             players: {
                 player_1: {
	                   player_number : '1',
	                   player_health : '10',
	                   player_energy :'1',
	                   player_alive : 'alive',
                     player_skin : 0
             },
             player_2: {
	               player_number : '2',
	               player_health : '10',
	               player_energy :'1',
	               player_alive : 'alive',
                 player_skin : 0

             },
             player_3: {
	               player_number : '3',
	               player_health : '10',
	               player_energy :'1',
	               player_alive : 'alive',
                 player_skin : 0

             },
             player_4: {
	               player_number : '4',
	               player_health : '10',
	               player_energy :'1',
	               player_alive : 'alive',
                 player_skin : 0

         }
        });
             break;
     }
         return game_ref
<<<<<<< HEAD
} 
=======
}
>>>>>>> parent of 75f673a... test
// add_player is best used to configure what skin a player will choose
// at the selection screen

function add_player (game,p_number,skin) {
         let game_ref = db.ref('/games' + game + '/' + 'players/' + 'player_' + p_number);
         let player_data = {
             player_skin : skin
         };
    let check_update = game_ref.update(player_data);
    return check_update;
     }

       function start_game(game) {
        // this assumes that all players have had
        // their skins selected
        let game_ref = db.ref("/games/" + game.toString());
        let gamestate_ref = game_ref.child("gameState/state");
        gamestate_ref.set("in_progress");
        // the ms argument for setInterval
        // is the turn time
       let turn_timer_ID = window.setInterval(run_game(game_ref),1000);
        
             }

             function run_game(game) {
        game.get().then((value) => {
            // here is essentially the entirety of how the game should run.
            // from here on, we need to link the DOM elements thatmdisplay information to the infromation rerieved within  "value"

            // WHAT WE NEED:
            // Every relevant players health, shield, armor, deck, card_hand, energy
            // howewver they are displayed in the DOCUMENT
            // every method which works on the above, allowing us to operate the game
            // the doms of the ui buttons which allow the player to play the game
            // at the end we we write 
                 });
             }
     function end_game () {
         clearInterval(turn_timer_ID);
     }
    </script>

  </body>
</html>
